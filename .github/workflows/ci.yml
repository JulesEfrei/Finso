name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_frontend:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Bun.sh
      - name: Set up Bun.sh
        uses: oven-sh/setup-bun@v2

      # Clean node_modules (remove package-lock.json if you prefer)
      - name: Clean node_modules
        working-directory: ./front-end
        run: rm -rf node_modules

      # Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: ./front-end
        run: bun install

      # Run frontend unit tests
      - name: Run frontend unit tests
        working-directory: ./front-end
        run: bun run test

      # Build the frontend
      - name: Build frontend
        working-directory: ./front-end
        run: bun run build

      # Upload frontend build artifact
      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ./front-end/build

  build_backend:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: mydb
        options: >-
          --health-cmd="pg_isready -U user" 
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Bun.sh
      - name: Set up Bun.sh
        uses: oven-sh/setup-bun@v2

      # Clean node_modules (remove package-lock.json if you prefer)
      - name: Clean node_modules
        working-directory: ./api
        run: rm -rf node_modules

      # Install backend dependencies
      - name: Install backend dependencies
        working-directory: ./api
        run: bun install

      # Wait for Postgres to be ready
      - name: Wait for PostgreSQL
        run: npx wait-on tcp:db:5432

      # Run backend unit tests
      - name: Run backend unit tests
        working-directory: ./api
        run: bun run test

      # Build backend (if necessary)
      - name: Build backend
        working-directory: ./api
        run: bun run build

      # Upload backend build artifact
      - name: Upload backend build artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: ./api/build

  e2e_tests:
    runs-on: ubuntu-latest
    needs: [build_frontend, build_backend]
    services:
      db:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: mydb
        options: >-
          --health-cmd="pg_isready -U user" 
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Bun.sh
      - name: Set up Bun.sh
        uses: oven-sh/setup-bun@v2

      # Install Playwright dependencies
      - name: Install Playwright dependencies
        run: npx playwright install-deps

      # Start backend server
      - name: Start API server
        working-directory: ./api
        run: bun run dev &

      # Wait for backend to be ready
      - name: Wait for API to be ready
        run: npx wait-on http://localhost:3000 # Ajuste le port si nécessaire

      # Start frontend server
      - name: Start Frontend server
        working-directory: ./front-end
        run: bun run dev &

      # Wait for frontend to be ready
      - name: Wait for Frontend to be ready
        run: npx wait-on http://localhost:3001 # Ajuste le port si nécessaire

      # Run Playwright E2E tests
      - name: Run Playwright End-to-End Tests
        working-directory: ./front-end # Assuming Playwright tests are in the frontend directory
        run: bun run playwright test e2e

  deploy:
    runs-on: ubuntu-latest
    needs: [e2e_tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy Frontend
        run: echo "Deploying frontend..."

      - name: Deploy Backend
        run: echo "Deploying backend..."
